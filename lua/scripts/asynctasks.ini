# 定义一个新任务
[build]
# 定义任务需要执行的命令，以 `$(...)` 形式出现的宏会在执行时被具体替换
command:c,cpp=gcc -O2 -Wall "$(VIM_FILEPATH)" -lstdc++ -lpthread -o "$(VIM_PATHNOEXT)"
command:go=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"
# command:rust=cargo build
command:rust=rustc "$(VIM_FILEPATH)"
command:python=python "$(VIM_FILEPATH)"
# 编译选择quickfix方便调试
output=quickfix
# 定义命令运行的目录
cwd=$(VIM_FILEDIR)
save=2

[run]
command="$(VIM_FILEPATH)"
# command:c,cpp="$(VIM_PATHNOEXT)"
# 编译代码并运行，运行结束后删除可执行文件
command:c,cpp=gcc -O2 -Wall "$(VIM_FILEPATH)" -lstdc++ -lpthread -o "$(VIM_PATHNOEXT)" && "$(VIM_PATHNOEXT)" && rm "$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)" run
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:bash=bash "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
# command:rust=cargo run
command:rust=rustc "$(VIM_FILEPATH)" && "$(VIM_PATHNOEXT)" && rm "$(VIM_PATHNOEXT)"
# 运行选择终端模式
output=terminal
cwd=$(VIM_FILEDIR)
save=2

# 整个项目的编译运行
[project-build]
command=make
# 设置在当前项目的根目录处运行 make
cwd=$(VIM_ROOT)

[project-run]
command=make run
# <root> 是 $(VIM_ROOT) 的别名，写起来容易些
cwd=<root>
output=terminal
